Modules(path) =
    return $(basename $(removesuffix $(find $(path) -name *.ml)))

FindlibExists(packages) =
    return $(equal 0,$(shell-code ocamlfind query $(packages) > /dev/null))

GenMeta() =
    meta = $(file META)
    $(meta): META.in
        sed -e 's/%version%/$(VERSION)/' $< > $@
    return $(meta)

InstallTargets(p) =
    p_root = $(BUILD_ROOT)/$p
    exts = a o cmi cmt cmti cmx cmxa cma mli
    ext_glob = $(addprefix -name *., $(exts))
    # without the split find doesn't accept the args properly
    flags = $(split \ ,$(concat \ -o , $(ext_glob)))
    files = $(p_root)/META $(find $(p_root) $(flags))
    return $(files)

MakeDep(ps) =
    foreach(p => ...,$(ps))
        OCAMLINCLUDES += $(BUILD_ROOT)/$p
        OCAML_LIBS += $(BUILD_ROOT)/$p/$p
        export
    export

USE_OCAMLFIND = true
BYTE_ENABLED = true

VERSION = 0.15.0

OCAMLFLAGS = -g -bin-annot -thread

OCAMLFINDFLAGS += -syntax camlp4o
OCAMLPACKS[] +=
    core_kernel
    lwt.log
    cohttp.lwt-core
    camlp4
    fieldslib.syntax
    sexplib.syntax
    ezjsonm

UNIX_DEPS = cmdliner cohttp.lwt magic-mime

BUILD_ROOT = $(dir _build)

SOURCE_DIRS = opium_kernel opium lib_test examples

EXAMPLES_DEPS = cow.syntax cow $(UNIX_DEPS)
TEST_DEPS = oUnit ezjsonm

EXAMPLES_ENABLED = true

foreach(s => ...,$(SOURCE_DIRS))
    vmount(-l, $s, $(BUILD_ROOT)/$s)
    export

CREATE_SUBDIRS = true

ALL_DEPS =

section
    LIB = opium_kernel
    FILES = $(Modules $(LIB))
    .SUBDIRS: $(BUILD_ROOT)/$(LIB)
        BUILD = $(OCamlLibrary $(LIB), $(FILES)) $(GenMeta)
        ALL_DEPS += $(BUILD)
        export ALL_DEPS
        .DEFAULT: $(BUILD)
    export ALL_DEPS

section
    LIB = opium
    FILES = $(Modules $(LIB))
    OCAMLPACKS += $(UNIX_DEPS)
    .SUBDIRS: $(BUILD_ROOT)/$(LIB)
        MakeDep(opium_kernel)
        BUILD = $(OCamlLibrary $(LIB), $(FILES)) $(GenMeta)
        ALL_DEPS += $(BUILD)
        export ALL_DEPS
        .DEFAULT: $(BUILD)
    export ALL_DEPS

section
    EXTRA_DEPS = $(EXAMPLES_DEPS)
    if $(FindlibExists $(EXTRA_DEPS))
        FILES = $(Modules examples)
        OCAMLPACKS += cow.syntax cow $(UNIX_DEPS)
        .SUBDIRS: $(BUILD_ROOT)/examples
            MakeDep(opium_kernel opium)
            .DEFAULT: $(foreach i => $(OCamlProgram $i, $i), $(FILES))

section
    EXTRA_DEPS = $(TEST_DEPS)
    if $(FindlibExists $(EXTRA_DEPS))
        FILES = $(Modules lib_test)
        OCAMLPACKS += $(EXTRA_DEPS) $(UNIX_DEPS)
        .SUBDIRS: $(BUILD_ROOT)/lib_test
            MakeDep(opium_kernel opium)
            TESTS = $(foreach i => $(OCamlProgram $i, $i), $(FILES))
            .DEFAULT: $(TESTS)
            .PHONY: check
            check: $(TESTS)
                foreach(t => $(shell-code ./$t$(EXE)),$(FILES))

README_SOURCES = hello_world.ml middleware_ua.ml
README_SOURCES = $(addprefix examples/,$(README_SOURCES))
README.md: README.cpp.md $(README_SOURCES)
    cppo -n -o $@ < $<

FINDLIB_PACKAGES = opium_kernel opium
.PHONY: install
install: $(ALL_DEPS)
    foreach(p => ..., $(FINDLIB_PACKAGES))
        ocamlfind install $p $(InstallTargets $p)

.PHONY: uninstall
uninstall:
    foreach(p => ..., $(FINDLIB_PACKAGES))
        ocamlfind remove $p

.DEFAULT: README.md

.PHONY: clean
clean:
    rm -rf $(BUILD_ROOT)
